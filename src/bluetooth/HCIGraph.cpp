#include "HCIGraph.h"

static std::map<uint16_t, HCINode*> nodes;

static void add_node(uint16_t opcode, std::string name, uint8_t reply){
    nodes[opcode] = new HCINode(opcode, name, reply);
}

#define ADD_NODE(x, y) add_node(x, #x, y)
static void init_nodes(){
    //Link Control Commands
    ADD_NODE(BT_HCI_CMD_INQUIRY, RP_NONE);
    ADD_NODE(BT_HCI_CMD_INQUIRY_CANCEL, RP_COMPLETE);
    ADD_NODE(BT_HCI_CMD_PERIODIC_INQUIRY, RP_COMPLETE);
    ADD_NODE(BT_HCI_CMD_EXIT_PERIODIC_INQUIRY, RP_COMPLETE);
    ADD_NODE(BT_HCI_CMD_CREATE_CONN, RP_STATUS);
    ADD_NODE(BT_HCI_CMD_DISCONNECT, RP_STATUS);
    ADD_NODE(BT_HCI_CMD_CREATE_CONN_CANCEL, RP_COMPLETE);
    ADD_NODE(BT_HCI_CMD_ACCEPT_CONN_REQUEST, RP_STATUS);
    ADD_NODE(BT_HCI_CMD_REJECT_CONN_REQUEST, RP_STATUS);
    ADD_NODE(BT_HCI_CMD_LINK_KEY_REQUEST_REPLY, RP_COMPLETE);
    ADD_NODE(BT_HCI_CMD_LINK_KEY_REQUEST_NEG_REPLY, RP_COMPLETE);
    ADD_NODE(BT_HCI_CMD_PIN_CODE_REQUEST_REPLY, RP_COMPLETE);
    ADD_NODE(BT_HCI_CMD_PIN_CODE_REQUEST_NEG_REPLY, RP_COMPLETE);
    ADD_NODE(BT_HCI_CMD_CHANGE_CONN_PKT_TYPE, RP_STATUS);
    ADD_NODE(BT_HCI_CMD_AUTH_REQUESTED, RP_STATUS);
    ADD_NODE(BT_HCI_CMD_SET_CONN_ENCRYPT, RP_STATUS);
    ADD_NODE(BT_HCI_CMD_CHANGE_CONN_LINK_KEY, RP_STATUS);
    ADD_NODE(BT_HCI_CMD_LINK_KEY_SELECTION, RP_STATUS);
    ADD_NODE(BT_HCI_CMD_REMOTE_NAME_REQUEST, RP_STATUS);
    ADD_NODE(BT_HCI_CMD_REMOTE_NAME_REQUEST_CANCEL, RP_COMPLETE);
    ADD_NODE(BT_HCI_CMD_READ_REMOTE_FEATURES);
    ADD_NODE(BT_HCI_CMD_READ_REMOTE_EXT_FEATURES);
    ADD_NODE(BT_HCI_CMD_READ_REMOTE_VERSION);
    ADD_NODE(BT_HCI_CMD_READ_CLOCK_OFFSET);
    ADD_NODE(BT_HCI_CMD_READ_LMP_HANDLE);
    ADD_NODE(BT_HCI_CMD_SETUP_SYNC_CONN);
    ADD_NODE(BT_HCI_CMD_ACCEPT_SYNC_CONN_REQUEST);
    ADD_NODE(BT_HCI_CMD_REJECT_CONN_REQUEST);
    ADD_NODE(BT_HCI_CMD_IO_CAPABILITY_REQUEST_REPLY);
    ADD_NODE(BT_HCI_CMD_USER_CONFIRM_REQUEST_REPLY);
    ADD_NODE(BT_HCI_CMD_USER_CONFIRM_REQUEST_NEG_REPLY);
    ADD_NODE(BT_HCI_CMD_USER_PASSKEY_REQUEST_REPLY);
    ADD_NODE(BT_HCI_CMD_USER_PASSKEY_REQUEST_NEG_REPLY);
    ADD_NODE(BT_HCI_CMD_REMOTE_OOB_DATA_REQUEST_REPLY);
    ADD_NODE(BT_HCI_CMD_REMOTE_OOB_DATA_REQUEST_NEG_REPLY);
    ADD_NODE(BT_HCI_CMD_IO_CAPABILITY_REQUEST_NEG_REPLY);
    ADD_NODE(BT_HCI_CMD_CREATE_PHY_LINK);
    ADD_NODE(BT_HCI_CMD_ACCEPT_PHY_LINK);
    ADD_NODE(BT_HCI_CMD_DISCONN_PHY_LINK);
    ADD_NODE(BT_HCI_CMD_CREATE_LOGIC_LINK);
    ADD_NODE(BT_HCI_CMD_ACCEPT_LOGIC_LINK);
    ADD_NODE(BT_HCI_CMD_DISCONN_LOGIC_LINK);
    ADD_NODE(BT_HCI_CMD_LOGIC_LINK_CANCEL);
    ADD_NODE(BT_HCI_CMD_FLOW_SPEC_MODIFY);
    ADD_NODE(BT_HCI_CMD_ENHANCED_SETUP_SYNC_CONN);
    ADD_NODE(BT_HCI_CMD_ENHANCED_ACCEPT_SYNC_CONN_REQUEST);
    ADD_NODE(BT_HCI_CMD_TRUNCATED_PAGE);
    ADD_NODE(BT_HCI_CMD_TRUNCATED_PAGE_CANCEL);
    ADD_NODE(BT_HCI_CMD_SET_PERIPHERAL_BROADCAST);
    ADD_NODE(BT_HCI_CMD_SET_PERIPHERAL_BROADCAST_RECEIVE);
    ADD_NODE(BT_HCI_CMD_START_SYNC_TRAIN);
    ADD_NODE(BT_HCI_CMD_RECEIVE_SYNC_TRAIN);
    ADD_NODE(BT_HCI_CMD_REMOTE_OOB_EXT_DATA_REQUEST_REPLY);

    // Link Policy Commands
    
}