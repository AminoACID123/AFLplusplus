#! /usr/bin/python3

import struct
import sys

# cat ../../../src/bluetooth/hci.h | grep '#define BT_HCI_EVT*' | awk '{print $3": ""\""$2"\","}'   

evt_dict = {
	0x01: "BT_HCI_EVT_INQUIRY_COMPLETE",
	0x02: "BT_HCI_EVT_INQUIRY_RESULT",
	0x03: "BT_HCI_EVT_CONN_COMPLETE",
	0x04: "BT_HCI_EVT_CONN_REQUEST",
	0x05: "BT_HCI_EVT_DISCONNECT_COMPLETE",
	0x06: "BT_HCI_EVT_AUTH_COMPLETE",
	0x07: "BT_HCI_EVT_REMOTE_NAME_REQUEST_COMPLETE",
	0x08: "BT_HCI_EVT_ENCRYPT_CHANGE",
	0x09: "BT_HCI_EVT_CHANGE_CONN_LINK_KEY_COMPLETE",
	0x0a: "BT_HCI_EVT_LINK_KEY_TYPE_CHANGED",
	0x0b: "BT_HCI_EVT_REMOTE_FEATURES_COMPLETE",
	0x0c: "BT_HCI_EVT_REMOTE_VERSION_COMPLETE",
	0x0d: "BT_HCI_EVT_QOS_SETUP_COMPLETE",
	0x0e: "BT_HCI_EVT_CMD_COMPLETE",
	0x0f: "BT_HCI_EVT_CMD_STATUS",
	0x10: "BT_HCI_EVT_HARDWARE_ERROR",
	0x11: "BT_HCI_EVT_FLUSH_OCCURRED",
	0x12: "BT_HCI_EVT_ROLE_CHANGE",
	0x13: "BT_HCI_EVT_NUM_COMPLETED_PACKETS",
	0x14: "BT_HCI_EVT_MODE_CHANGE",
	0x15: "BT_HCI_EVT_RETURN_LINK_KEYS",
	0x16: "BT_HCI_EVT_PIN_CODE_REQUEST",
	0x17: "BT_HCI_EVT_LINK_KEY_REQUEST",
	0x18: "BT_HCI_EVT_LINK_KEY_NOTIFY",
	0x19: "BT_HCI_EVT_LOOPBACK_COMMAND",
	0x1a: "BT_HCI_EVT_DATA_BUFFER_OVERFLOW",
	0x1b: "BT_HCI_EVT_MAX_SLOTS_CHANGE",
	0x1c: "BT_HCI_EVT_CLOCK_OFFSET_COMPLETE",
	0x1d: "BT_HCI_EVT_CONN_PKT_TYPE_CHANGED",
	0x1e: "BT_HCI_EVT_QOS_VIOLATION",
	0x1f: "BT_HCI_EVT_PSCAN_MODE_CHANGE",
	0x20: "BT_HCI_EVT_PSCAN_REP_MODE_CHANGE",
	0x21: "BT_HCI_EVT_FLOW_SPEC_COMPLETE",
	0x22: "BT_HCI_EVT_INQUIRY_RESULT_WITH_RSSI",
	0x23: "BT_HCI_EVT_REMOTE_EXT_FEATURES_COMPLETE",
	0x2c: "BT_HCI_EVT_SYNC_CONN_COMPLETE",
	0x2d: "BT_HCI_EVT_SYNC_CONN_CHANGED",
	0x2e: "BT_HCI_EVT_SNIFF_SUBRATING",
	0x2f: "BT_HCI_EVT_EXT_INQUIRY_RESULT",
	0x30: "BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE",
	0x31: "BT_HCI_EVT_IO_CAPABILITY_REQUEST",
	0x32: "BT_HCI_EVT_IO_CAPABILITY_RESPONSE",
	0x33: "BT_HCI_EVT_USER_CONFIRM_REQUEST",
	0x34: "BT_HCI_EVT_USER_PASSKEY_REQUEST",
	0x35: "BT_HCI_EVT_REMOTE_OOB_DATA_REQUEST",
	0x36: "BT_HCI_EVT_SIMPLE_PAIRING_COMPLETE",
	0x38: "BT_HCI_EVT_LINK_SUPV_TIMEOUT_CHANGED",
	0x39: "BT_HCI_EVT_ENHANCED_FLUSH_COMPLETE",
	0x3b: "BT_HCI_EVT_USER_PASSKEY_NOTIFY",
	0x3c: "BT_HCI_EVT_KEYPRESS_NOTIFY",
	0x3d: "BT_HCI_EVT_REMOTE_HOST_FEATURES_NOTIFY",
	0x3e: "BT_HCI_EVT_LE_META_EVENT",
	0x40: "BT_HCI_EVT_PHY_LINK_COMPLETE",
	0x41: "BT_HCI_EVT_CHANNEL_SELECTED",
	0x42: "BT_HCI_EVT_DISCONN_PHY_LINK_COMPLETE",
	0x43: "BT_HCI_EVT_PHY_LINK_LOSS_EARLY_WARNING",
	0x44: "BT_HCI_EVT_PHY_LINK_RECOVERY",
	0x45: "BT_HCI_EVT_LOGIC_LINK_COMPLETE",
	0x46: "BT_HCI_EVT_DISCONN_LOGIC_LINK_COMPLETE",
	0x47: "BT_HCI_EVT_FLOW_SPEC_MODIFY_COMPLETE",
	0x48: "BT_HCI_EVT_NUM_COMPLETED_DATA_BLOCKS",
	0x4c: "BT_HCI_EVT_SHORT_RANGE_MODE_CHANGE",
	0x4d: "BT_HCI_EVT_AMP_STATUS_CHANGE",
	0x4e: "BT_HCI_EVT_TRIGGERED_CLOCK_CAPTURE",
	0x4f: "BT_HCI_EVT_SYNC_TRAIN_COMPLETE",
	0x50: "BT_HCI_EVT_SYNC_TRAIN_RECEIVED",
	0x51: "BT_HCI_EVT_PERIPHERAL_BROADCAST_RECEIVE",
	0x52: "BT_HCI_EVT_PERIPHERAL_BROADCAST_TIMEOUT",
	0x53: "BT_HCI_EVT_TRUNCATED_PAGE_COMPLETE",
	0x54: "BT_HCI_EVT_PERIPHERAL_PAGE_RESPONSE_TIMEOUT",
	0x55: "BT_HCI_EVT_PERIPHERAL_BROADCAST_CHANNEL_MAP_CHANGE",
	0x56: "BT_HCI_EVT_INQUIRY_RESPONSE_NOTIFY",
	0x57: "BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXPIRED",
	0x59: "BT_HCI_EVT_ENCRYPTION_CHANGE_V2",
	0xff: "CUSTOM_EVENT"
}

le_evt_dict = {
	0x01: "BT_HCI_EVT_LE_CONN_COMPLETE",
	0x02: "BT_HCI_EVT_LE_ADV_REPORT",
	0x03: "BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE",
	0x04: "BT_HCI_EVT_LE_REMOTE_FEATURES_COMPLETE",
	0x05: "BT_HCI_EVT_LE_LONG_TERM_KEY_REQUEST",
	0x06: "BT_HCI_EVT_LE_CONN_PARAM_REQUEST",
	0x07: "BT_HCI_EVT_LE_DATA_LENGTH_CHANGE",
	0x08: "BT_HCI_EVT_LE_READ_LOCAL_PK256_COMPLETE",
	0x09: "BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE",
	0x0a: "BT_HCI_EVT_LE_ENHANCED_CONN_COMPLETE",
	0x0b: "BT_HCI_EVT_LE_DIRECT_ADV_REPORT",
	0x0c: "BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE",
	0x0d: "BT_HCI_EVT_LE_EXT_ADV_REPORT",
	0x0e: "BT_HCI_EVT_LE_PA_SYNC_ESTABLISHED",
	0x0f: "BT_HCI_EVT_LE_PA_REPORT",
	0x10: "BT_HCI_EVT_LE_PA_SYNC_LOST",
	0x12: "BT_HCI_EVT_LE_ADV_SET_TERM",
	0x13: "BT_HCI_EVT_LE_SCAN_REQ_RECEIVED",
	0x14: "BT_HCI_EVT_LE_CHAN_SELECT_ALG",
	0x17: "BT_HCI_EVT_LE_CTE_REQUEST_FAILED",
	0x18: "BT_HCI_EVT_LE_PA_SYNC_TRANS_REC",
	0x19: "BT_HCI_EVT_LE_CIS_ESTABLISHED",
	0x1a: "BT_HCI_EVT_LE_CIS_REQ",
	0x1b: "BT_HCI_EVT_LE_BIG_COMPLETE",
	0x1c: "BT_HCI_EVT_LE_BIG_TERMINATE",
	0x1d: "BT_HCI_EVT_LE_BIG_SYNC_ESTABILISHED",
	0x1e: "BT_HCI_EVT_LE_BIG_SYNC_LOST",
	0x1f: "BT_HCI_EVT_LE_REQ_PEER_SCA_COMPLETE"
}
 

def main():
	n = len(sys.argv)
	if(n != 2):
		print("Require the file to parse.")
		exit(1)
	 
	fn = sys.argv[1]

	with open(fn, "rb") as f:
		buf = f.read()
		i = 0
		while True:
			(size, flag) = struct.unpack("<IB", buf[i:i+5])
			if flag == 6:
				(size, flag, harness) = struct.unpack("<IBI", buf[i:i+9])
				print("Operation: ")
				print(harness)
			else:
				(size, flag, event) = struct.unpack("<IBB", buf[i:i+6])
				print("HCI Event: ")
				if event in evt_dict.keys():
					if event == 0x3e:
						print(le_evt_dict[buf[i+7]])
					else:
						print(evt_dict[event])
				else:
					print("Unknown event " + str(hex(event)))
			i += (4 + size)
			if i >= len(buf):
				return

	     

if __name__ == "__main__":
	main()
